#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let http = require('http');
let socketIO = require('socket.io')
let debug = require('debug')('app:www');
let sobug = require('debug')('app:socket');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */
let server = http.Server(app);

/**
 * Socket.io
 */

let io = socketIO(server)
io.on('connection', onConnection);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {

  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event connection for Socket io
 */
function onConnection(socket){
    sobug('A user connected');

    socket.on('disconnect', function(){
        sobug('user disconnected');
    });

    socket.on('subscribe', function(room) {
        console.log('User joining room', room);
        socket.join(room);
    });

    socket.on('unsubscribe', function(room) {
        console.log('User leaving room', room);
        socket.leave(room);
    });

    socket.on('data:store', function(data){
        sobug('Data store event : ' + JSON.stringify(data.action));
        socket.broadcast.to(data.room).emit('data:store', data.action)
    });
}